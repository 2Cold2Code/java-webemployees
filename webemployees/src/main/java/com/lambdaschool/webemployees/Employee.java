package com.lambdaschool.webemployees;

import java.util.concurrent.atomic.AtomicLong;

/**
 * The employee's data
 */
public class Employee
{
    /**
     * A class variable that keeps track of the last employee id assigned.
     * AtomicLong prevents the same employee id from being assigned to two objects even they are created at the same time.
     * AtomicLong handles concurrent operations and is updated automatically. It is not a substitute of Long.
     */
    private static final AtomicLong counter = new AtomicLong();

    /**
     * The id (long) of an employee object. Unique to all employees
     */
    private long id;

    /**
     * The first name (String) of the employee. Any format is acceptable
     */
    private String fname;

    /**
     * The last name (String) of the employee. Any format is acceptable
     */
    private String lname;

    /**
     * The salary (double) of the employee.
     */
    private double salary;

    /**
     * True or false (boolean) stating whether or not an employee has a 401K retirement plan in place.
     */
    private boolean has401k;

    /**
     * The id number (int) of the company of this employee
     */
    private int companyID;

    /**
     * The id number (int) of the health plan this employee chose.
     */
    private int healthPlanID;

    /**
     * Given the parameters, create a new employee object!
     *
     * id is autogenerated
     * @param fname The first name (String) of the employee
     * @param lname The last name (String) of the employee
     * @param salary The salary (double) of the employee
     * @param has401k Does the employee have a 401K plan (boolean)
     * @param companyID The id (int) of the company of this employee
     * @param healthPlanID The id (int) of the health plan this employee chose.
     */
    public Employee(String fname, String lname, double salary, boolean has401k, int companyID, int healthPlanID)
    {
        this.id = counter.incrementAndGet();
        this.fname = fname;
        this.lname = lname;
        this.salary = salary;
        this.has401k = has401k;
        this.companyID = companyID;
        this.healthPlanID = healthPlanID;
    }

    /**
     * Takes an employee object and return a new employee object that contains all the same data but with a different pointer.
     * Makes a true copy of the given employee object.
     *
     * @param toClone the employee object to copy.
     */
    public Employee (Employee toClone)
    {
        this.id = toClone.getId();
        this.fname = toClone.getFname();
        this.lname = toClone.getLname();
        this.salary = toClone.getSalary();
        this.has401k = toClone.isHas401k();
        this.companyID = toClone.getCompanyID();
        this.healthPlanID = toClone.getHealthPlanID();
    }

    /**
     * Getter for id. There is not setter for id as it is autogenerated.
     *
     * @return the id (long) of the employee's object
     */
    public long getId()
    {
        return id;
    }

    /**
     * Getter for full name
     *
     * @return full name (String) of employee which is first and last name with a space in between
     */
    public String getName()
    {
        return fname + " " + lname;
    }

    /**
     * Getter for first name
     *
     * @return employee's first name (String)
     */
    public String getFname()
    {
        return fname;
    }

    /**
     * Setter for first name
     *
     * @param fname the new first name (String) of the employee
     */
    public void setFname(String fname)
    {
        this.fname = fname;
    }

    /**
     * Getter for last name
     *
     * @return the last name (String) of this employee
     */
    public String getLname()
    {
        return lname;
    }

    /**
     * Setter for last name
     *
     * @param lname the new last name (String) of the employee
     */
    public void setLname(String lname)
    {
        this.lname = lname;
    }

    /**
     * Getter for salary
     *
     * @return the salary (double) of this employee
     */
    public double getSalary()
    {
        return salary;
    }

    /**
     * Setter for salary
     *
     * @param salary the new salary (double) of this employee
     */
    public void setSalary(double salary)
    {
        this.salary = salary;
    }

    /**
     * Answers the question does this employee have a 401K plan
     *
     * @return true of false (boolean)
     */
    public boolean isHas401k()
    {
        return has401k;
    }

    /**
     * Setter for has401K plan
     *
     * @param has401k true or false (boolean), does this employee have a 401K plan
     */
    public void setHas401k(boolean has401k)
    {
        this.has401k = has401k;
    }

    /**
     * Getter for company id
     *
     * @return the id number (int) of this employee's current company
     */
    public int getCompanyID()
    {
        return companyID;
    }

    /**
     * Setter for company id
     *
     * @param companyID the id number (int) of the new company of this employee
     */
    public void setCompanyID(int companyID)
    {
        this.companyID = companyID;
    }

    /**
     * Getter for health plan id
     *
     * @return the id number (int) of the health plan the employee chose
     */
    public int getHealthPlanID()
    {
        return healthPlanID;
    }

    /**
     * Setter for health plan id
     *
     * @param healthPlanID the id number (int) of the new health plan the employee chose
     */
    public void setHealthPlanID(int healthPlanID)
    {
        this.healthPlanID = healthPlanID;
    }
}
